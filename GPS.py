import time
import paho.mqtt.client as mqtt  # type: ignore

# Configuraci√≥n del broker de Wokwi (Mosquitto)
WOKWI_BROKER = "test.mosquitto.org"
WOKWI_TOPIC = "gps/coordinates"  # Aseg√∫rate de que este t√≥pico coincida con el del ESP32

# Configuraci√≥n del broker de Flespi
FLESPI_BROKER = "mqtt.flespi.io"
FLESPI_TOPIC = "gps"  # T√≥pico en Flespi donde se enviar√°n los datos
FLESPI_TOKEN = "N1jjPhpPJOlsDOb67SCRqfRDpiNNfsETkHn8ioNoJbJK2kchzca0e0FlU9mMviwg"  # Reemplazar con tu token de Flespi

# Funci√≥n que se llama cuando el cliente MQTT de Python se conecta al broker
def on_connect(client, userdata, flags, rc):
    print(f"Conectado al broker con c√≥digo {rc}")
    # Suscribir al t√≥pico donde el ESP32 publicar√° las coordenadas
    client.subscribe(WOKWI_TOPIC)

# Funci√≥n cuando se recibe un mensaje desde Wokwi
def on_message(client, userdata, msg):
    try:
        payload = msg.payload.decode()
        print(f"üì• Recibido de Wokwi: {payload}")

        # Enviar a Flespi
        flespi_client.publish(FLESPI_TOPIC, payload)
        print(f"üì§ Enviado a Flespi: {payload}")

    except Exception as e:
        print(f"‚ö† Error al procesar mensaje: {e}")

# Configurar cliente para Wokwi
wokwi_client = mqtt.Client()
wokwi_client.on_connect = on_connect
wokwi_client.on_message = on_message

# Configurar cliente para Flespi
flespi_client = mqtt.Client()
flespi_client.username_pw_set(FLESPI_TOKEN)

try:
    # Conectar a Flespi
    flespi_client.connect(FLESPI_BROKER, 1883)
    flespi_client.loop_start()

    # Conectar a Wokwi
    wokwi_client.connect(WOKWI_BROKER, 1883)
    wokwi_client.loop_start()

    # Mantener el script en ejecuci√≥n para recibir mensajes
    print("üì° Escuchando datos de Wokwi...")
    while True:
        time.sleep(1)

except KeyboardInterrupt:
    print("\nüîå Desconectando...")
    wokwi_client.disconnect()
    flespi_client.disconnect()
except Exception as e:
    print(f"‚ùå Error cr√≠tico: {e}")